#!/usr/bin/python3.6

def update_db(hasher,only,verbose) : 
        t_ = Thread(target=email_handler,args=("True",))
        t_.start()
        total_paths=[]
        try :
              os.mkdir('/usr/share/sic/.DirArchi')
        except Exception as e :
              pass
        if only == 0 :    
         fr = open('/usr/share/sic/AllFiles.list','r')
        else :
         fr = open('/usr/share/sic/update_specific.list','r')
        thread_list = []
        for line in fr.readlines() :
                line = line.strip("\n")
                dir = (str(line))             
                table_name = dir.replace('/','_').replace('-','_').replace('.','_').replace(" ","").replace("	","").replace("\n","")
                update_check=0
                t = Thread(target=FillTable,args=(dir,table_name,hasher,verbose,update_check,total_paths))
                t.start()
                thread_list.append(t)
                                
        for t in thread_list :
              t.join()
        t_.join()
        
        if only == 0 :
         n = 0
         for x in total_paths :
              n += x
         del total_paths
         ff = open('/usr/share/sic/.num_in_init','w'); ff.write(str(n)); ff.close(); os.chmod('/usr/share/sic/.num_in_init',0o400); 
         fr.close()
        else : 
         os.remove('/usr/share/sic/update_specific.list')
        fr = open('/var/log/apt/history.log','rb')
        fw = open('/usr/share/sic/.sys_update','w')
        h = hashlib.new('sha256',fr.read()).hexdigest()+"  /var/log/apt/history.log"
        fw.write(h)
        fr.close()
        fw.close()
        return

def actual_db(type,verbose) :

	if type.lower() != 'short' and type.lower() != 'long' and type.lower() != 'specific' :
		sys.stderr.write("[!] Available scan types : LONG, SHORT, SPECIFIC.\nCheck the help manual : sic --help.\n")
		sys.exit(1)
	
	if type.lower() == 'short' :
		fr = open('/usr/share/sic/BinFiles.list','r')
	elif type.lower() == 'long' :
		fr = open('/usr/share/sic/AllFiles.list','r')
	else : 
		fr = open('/usr/share/sic/SpecificFiles.list','r')
	
	if os.path.isfile('/usr/share/sic/.hash') :
		fra = open('/usr/share/sic/.hash','r')
		hasher = fra.readline().rstrip().strip()

	thread_list = []
	total_paths = []

	for line in fr.readlines() :
		line = line.rstrip()
		dir = (str(line))                  
		table_name = dir.replace('/','_').replace('-','_').replace('.','_').replace(" ","").replace("	","").replace("\n","")
		update_check = 1
		if not os.path.isfile('/usr/share/sic/.hash') :
			t=Thread(target=FillTable,args=(dir,table_name,"sha256",verbose,update_check,total_paths))
			t.start()
			thread_list.append(t)
		else : 
			t=Thread(target=FillTable,args=(dir,table_name,hasher,verbose,update_check,total_paths))
			t.start()
			thread_list.append(t)

	for t in thread_list : 
		t.join()	

	if os.path.isfile('/usr/share/sic/.hash') :
		fra.close()
	n = 0
	for x in total_paths :
		n += x
	del total_paths
	ff = open('/usr/share/sic/.num_in_check','w'); ff.write(str(n)); ff.close(); os.chmod('/usr/share/sic/.num_in_check',0o400);  
	fr.close()	
	if os.path.isfile('/usr/share/sic/SpecificFiles.list') :
		os.remove('/usr/share/sic/SpecificFiles.list')	
	return


def FillTable(dir,table_name,hasher,verbose,update_check,total_paths) :
	if update_check == 0 :
		db.drop_table(table_name)
		db.create_table(table_name)
	try :
		total_paths.append(Hasher.HashDir(dir,table_name,hasher,verbose,update_check))
	except Exception as e :
		pass
	return 

def cmp_base_actual(type,verbose) :
	
	fr = open('/usr/share/sic/ActualBase.list','r')
	fw = open('/var/log/sic.log','w')
	fa = open('/var/log/sic.history','a')
	
	temp = ""
	total_warnings = 0
	total_files = 0
	added_files = "Files have been added :"
	b = True
	fa.write("Scan of : "+str(datetime.datetime.now())+"\n")
	fw.write("Scan of : "+str(datetime.datetime.now())+"\n")
	lines = fr.readlines()
	for str_row in lines :
	
		actual_row = tuple(temp.join(x for x in str_row if x is not "'" and x is not " " and x is not "\n").split(","))
		base_row = db.retrieve_row(actual_row[-1],actual_row[0])

		if base_row is None :
			try :
				added_files += "\n\t| " +str(actual_row[0])+ " added at : "+str(datetime.datetime.fromtimestamp(os.path.getatime(actual_row[0])))
			except Exception :
				pass
			else :
				pass
		else :
			if "/boot" in actual_row[0] :
				try :
					b , warning = cmp_some(actual_row,base_row)
				except Exception as e :
					pass
								 
			elif "/etc" in actual_row[0] and not "/etc/init" in actual_row[0] and not "/etc/rc" in actual_row[0] :
				try :
					b , warning = cmp_some(actual_row,base_row)
				except Exception as e :
					pass
				
			else :
				try :
					b , warning = cmp_all(actual_row,base_row)
				except Exception as e :
					pass
			if not b :
				b = True
				total_warnings += 1
				t3=Thread(target=FileWriter,args=(fw,"\n"+str(actual_row[0])+" : "+warning+"\n"))
				t4=Thread(target=FileWriter,args=(fa,"\n"+str(actual_row[0])+" : "+warning+"\n"))
				t3.start()
				t4.start()
				print(actual_row[0], " : \x1b[6;30;41m" ,warning + "\x1b[0m")
			else :
				if verbose :
					print(actual_row[0]," : \x1b[6;30;42m" + "Clean" + "\x1b[0m")

	if not b :
		t3.join()
		t4.joing()
	print("\nTotal files scanned : "+counter(len(lines))+"\nTotal warnings found : "+str(total_warnings)+"\n")	
	print("\nPlease check the log file (/var/log/sic.log)\n")		
	fw.write("\nTotal files scanned : "+counter(len(lines))+"\nTotal warnings found : "+str(total_warnings)+"\n")
	fa.write("\nTotal files scanned : "+counter(len(lines))+"\nTotal warnings found : "+str(total_warnings)+"\n\n")
	
	if len(added_files) > 23 : 
		print(added_files)
		fw.write(added_files+"\n")
		fa.write(added_files+"\n")
		
	if type.lower() == 'long' :
		ff = open('/usr/share/sic/.num_in_init','r'); init = int(ff.readline()); ff.close()
		ff = open('/usr/share/sic/.num_in_check','r'); check = int(ff.readline()); ff.close()
		if init > check :
			archi_diff()
		os.remove('/usr/share/sic/.num_in_check')
			
	fa.write("\n------------------------------------------------------------------------------------------\n")
	fa.close()
	fw.close()
	fr.close()
	os.chmod('/var/log/sic.log',0o400)
	os.chmod('/var/log/sic.log',0o600)
	t = Thread(target=email_handler, args=("False",))
	t.start()
	
	if total_warnings > 60 :
		fr = open('/var/log/apt/history.log','rb')
		actual = hashlib.new('sha256',fr.read()).hexdigest()
		fr.close()
		fr = open('/usr/share/sic/.sys_update','r')
		base = fr.readline().strip(" ")[0]
		fr.close()
		if actual != base :
			print("[!] Your system has been update.")
			print("You may want to update the baseline too ? : sic --update")
	return
	
	
def cmp_all(actual_row,base_row) :

	warning = ""
	if actual_row != base_row :

		if actual_row[1] != base_row[1] :

			warning += "\n\t| file's content has been changed at : "+str(datetime.datetime.fromtimestamp(os.path.getmtime(actual_row[0])))
			
		bool,temp = cmp_some(actual_row,base_row,warning)

		return False,warning
	else : 
		return True,warning
	

def cmp_some(actual_row,base_row,warning) :
	if actual_row[2] != base_row[2] :

		if actual_row[3] != base_row[3] :
			warning += "\n\t| file's inoeud has been changed "

		if actual_row[4] != base_row[4] :
			warning += "\n\t| file's permission has been changed "

		if actual_row[5] != base_row[5] :
			warning += "\n\t| file's user has been changed "

		if actual_row[6] != base_row[6] :
			warning += "\n\t| file's groupe has been changed "

		if actual_row[7] != base_row[7] :
			warning += "\n\t| file's link number has been changed "


		warning += " at : "+str(datetime.datetime.fromtimestamp(os.path.getctime(actual_row[0]))) 
		return False,warning
	else :
		 
		return True,warning
		
		
def FileWriter(f,string) :
	f.write(string)
	return	

def cronjob(type) :
	if type.lower() != 'short' and type.lower() != 'long' :
		sys.stderr.write("[!] Available type-check for a cronjob : LONG or SHORT\n")
		sys.exit(1)

	print('''
CRONJOB-MANUAL: 

	You need to set five fields, which are separated with white spaces : 
		Minute	Hour	Day_of_mounth	Mounth	Day_of_week

	Minute : (0-59)
	Hour : (0-23)
	Day_of_mounth : (1-31)
	Mounth : (1-12)
	Day_of_week : (Sunday-Saturday)

You can use meta-characters : '*' ',' to create more complex time schedule 

EXAMPLES:

	* * * * * : means every minute of every hours of every day of the mounth for every day of the week
	0 16 1,10,22 * * : means at 16:00 on the 1st,10th,22th day of every mounth

		''')
	time_l = input("Set your cronjob time : ").strip().split(' ')
	
	while '' in time_l :
		time_l.remove('')
	time_s = ''
	time_s = time_s.join(x+' ' for x in time_l)
	time_s = time_s.strip()
	commands = "sudo crontab -l | { sudo cat; sudo echo \""+time_s+" sudo /usr/share/sic/sic -c -t "+type+"\"; } | sudo crontab -"
	li = subprocess.getstatusoutput(commands)
	if li[0] != 0 :
		print("[!] Wrong configuration of cronjob : Re-read the CRONJOB-MANUAL above !")
		sys.exit(1)
	return
	

def archi_diff() :

	fr = open('/usr/share/sic/AllFiles.list','r')
	try :	
		os.mkdir('/tmp/.DirArchi')
		os.chmod('/tmp/.DirArchi',0o700)
	except Exception as e :
		pass
	
	
	thread_list=[]
	for line in fr.readlines() :
		line = line.rstrip()
		dir = str(line)           
		table_name = dir.replace('/','_').replace('-','_').replace('.','_').replace(" ","").replace("	","").replace("\n","")
		t=Thread(target=ArchiWriter,args=(dir,table_name))
		t.start()
		thread_list.append(t)
		
	for t in thread_list :
		t.join()
	fr.close()
	
	fw = open('/var/log/sic.log','a')
	fa = open('/var/log/sic.history','a')
	
	path_init = '/usr/share/sic/.DirArchi/'
	path_check = '/tmp/.DirArchi/'
	
	result = "[!] Files have been removed :"
	fw.write("\n[!] Files have been removed :")
	fa.write("\n[!] Files have been removed :")
	
	file_list = os.listdir(path_init)
	for f in file_list :
		li = open(path_init+f,'r').readlines()
		lc = open(path_check+f,'r').readlines() 
		for path in li :
			if not path in lc :
				result += "\t| "+path
				fw.write("\t| "+path+"\n")
				fa.write("\t| "+path+"\n")
	if len(result) > 29 :
		print(result)
	else :
		print("[!] No file has been removed.")
	fw.close()
	fa.close()
	shutil.rmtree('/tmp/.DirArchi')
	return

def ArchiWriter(dir,table_name) :
	fw = open('/tmp/.DirArchi/.'+table_name,'w')
	for rootDir , subDirs , subFiles in os.walk(dir) :
		for i in range(0,len(subFiles)) :
			f = str(rootDir)+'/'+str(subFiles[i])
			fw.write(f+"\n")
	fw.close()
	os.chmod('/tmp/.DirArchi/.'+table_name,0o600)
	return
		
	
def Examples() :
	
	print('''

EXAMPLES:

    sic [-u|--update] [-dir|--directories] directorie(s) [-algo|--hash-algorithm] HASH : Update the baseline database adding specific directorie(s) using a specific hash-type
 
    sic [-c|--check] [-t|--type] TYPE : Check local files using a specific check-type

    sic [-cron|--cronjob] : Add the check operation in the crontab list


You can add [-v|--verbose] option for all this examples for enabling verbosity and more details in the output.

RECOMMENDED OPTIONS:
   
   1- sic -u -d "directories" -algo SHA256 -v

   2- sic -c -t SHORT -v 

   3- sic -cron 
     
   4- Configure the cronjob options

   5- Read the report file : /var/log/sic.log

   6- Check your mail for more details

   7- Feel safe :)

	      ''')
	return


def existDir(dir) :

	fr = open('/usr/share/sic/AllFiles.list','r')
	dirs = fr.readlines()
	dir += "\n"
	return dir in dirs

def addDirectories(dirs) :
	
	fa = open('/usr/share/sic/AllFiles.list','a')
	for i in dirs :
		dir = str(i)
		if dir.endswith("/") :
			dir = dir[:-1]
		if os.path.isdir(dir) :
			if not existDir(dir) :
				fa.write(dir+'\n')
			else : 
				sys.stderr.write("[!] Directory already exists in the database : "+dir+"\n")
				sys.exit(1)
		else :
			sys.stderr.write("[!] Directory not found : "+dir+"\n")
			sys.exit(1)
	return
		
def email_handler(*case) :

	if case[0] == "True" :
		emails.UpdateAlert()
	else :
		emails.ScanReport()
	return

def counter(n):
	return str(n*7)	
	
	
if __name__ == '__main__' :
	
	try :
		import Hasher, db, key_gen, emails
		import sys, os, argparse, subprocess, hashlib, datetime, time, shutil, command
		from threading import Thread 
	except ImportError as e :
		print("[!] Missing module : ",e)
		sys.exit(1)
		
	if os.getuid() != 0 : 
		print("You must be root to run this program.")
		sys.exit(1)

	fd = open('/dev/null','w')
	rc = subprocess.call(["sudo","/etc/init.d/postgresql","start"],stdout=fd,stderr=subprocess.STDOUT)
	
	if (rc != 0) :
		
		sys.stderr.write("[!] Couldn't start postgresql service.\n")
		sys.exit(1)
	
	if  ( len(sys.argv) == 2 and sys.argv[1] == 'init' ) :
		update_db(hasher="sha256",only=0,verbose=True)
		sys.exit(0)
	
	parsers = argparse.ArgumentParser(description='Super Integrity Checker',epilog='Authors: <alimyanis8496@gmail.com> <Hodaifa.mellal@gmail.com>')
	
	parsers._action_groups.pop()
	
	parser = parsers.add_argument_group('Possible arguments')
		
	parser.add_argument('-u', '--update', help='Update the baseline database', action='store_true', dest='update') 
	
	parser.add_argument('-c', '--check', help='Launch a check', action='store_true', dest='check')

	parser.add_argument('-t', '--type', help='Set the check type', action='store', dest='type', metavar='{SHORT|LONG|SPECIFIC}', default=False)  

	parser.add_argument('-algo','--hash-algorithm', help='Set a hash-algorithm type', action='store', dest='hash', metavar='{SHA1|SHA256|SHA512}', default=False)

	parser.add_argument('-dir', '--directories', help='Add specific directories', dest='dirs', metavar='dir' , nargs='*', default=False)
	
	parser.add_argument('-o', '--only', help='Update specific directories', dest='only', metavar='dir' , nargs='*', default=False)

	parser.add_argument('-cron', '--cronjob' , help='Add a cronjob for the check operation', action='store_true', dest='cron', default=False)
	
	parser.add_argument('-real', '--real-time' , help='Enable real-time detection', action='store_true', dest='real', default=False)
	
	parser.add_argument('-arch', '--architecture-difference' , help='Check for architecture difference (added/deleted) files', action='store_true', dest='arch', default=False)
	
	parser.add_argument('-r', '--recommend', help='Show recommended options', action='store_true', dest='rec') 

	parser.add_argument('-v', '--verbose', help='Verbose output', action='store_true', dest='verbose')

	args = parsers.parse_args()
	
	if ( len(sys.argv) == 1 ) :
		parsers.print_help()
		sys.exit(1)	

	if args.update and not args.check and not args.type and not args.cron and not args.rec and not args.arch and not args.real :

		only = 0	
		if args.dirs :
			addDirectories(args.dirs)
		if args.only : 
			only = 1
			fw_ = open('/usr/share/sic/update_specific.list','w')
			os.chmod('/usr/share/sic/update_specific.list',0o600)
			for d in args.only :
				if d.endswith("/") :
					d = d[:-1]
				if not existDir(d) :
					print("[!] Directory doesn't exist in database : ",dir)
					print("Update the database adding specific directories : sic -u -dir [dir_1 [... dir_n]] -v")
					sys.exit(1)
				else :
					fw_.write(d+"\n")
			fw_.close()

	
		if args.hash :	
			fd = open('/usr/share/sic/.hash','w')
			os.chmod('/usr/share/sic/.hash',0o600)
			if args.hash.upper() == 'SHA1' : 
				hasher = 'SHA1'
			elif args.hash.upper() == 'SHA256' :
				hasher = 'SHA256' 
			elif args.hash.upper() == 'SHA512' :
				hasher = 'SHA512'
			else : 
				sys.stderr.write("[!] Available hash-algorithms : SHA1, SHA256, SHA512\nCheck the help manual : sic --help\n")
				sys.exit(1) 
			fd.write(str(hasher))
			fd.close()
		else :
			hasher = 'SHA256' 

		key = input("Enter your key : ").strip()
		if (key_gen.KeyCheck(key)) :
			update_db(hasher,only,args.verbose)
			if os.path.isfile('/usr/share/sic/update_specific.list') :
				os.remove('/usr/share/sic/update_specific.list')
			sys.exit(0)
		else : 
			sys.stderr.write("Wrong key.\n")
			sys.exit(1)

	elif not args.update and not args.hash and not args.rec and not args.arch and not args.real and not args.only:
		if args.check and args.type and not args.cron :
			if args.type.lower() == 'specific' :
				if not args.dirs : 
					sys.stderr.write("You need to specify the directorie(s) to check using the -dir option.\n")
					sys.exit(1)
				else :
					fw = open('/usr/share/sic/SpecificFiles.list','w')
					os.chmod('/usr/share/sic/SpecificFiles.list',0o600)
					for dir in args.dirs :
						if dir.endswith("/") :
							dir = dir[:-1]
						if os.path.isdir(dir) :
							if existDir(dir) : 
								fw.write(str(dir)+"\n")
							else :
								print("[!] Directory doesn't exist in database : ",dir)
								print("Update the database adding specific directories : sic -u -dir [dir_1 [... dir_n]] -v")

								sys.exit(1)
						else :
							sys.stderr.write("[!] Directory not found : "+str(dir)+"\n")
							sys.exit(1)
					fw.close()
			actual_db(args.type,args.verbose)
			cmp_base_actual(args.type,args.verbose)
			os.remove('/usr/share/sic/ActualBase.list')
			sys.exit(0)
		elif args.cron and args.type :
			cronjob(args.type)
			sys.exit(0)
		elif args.cron and not args.type :
			sys.stderr.write("[!] You need to specifie type-check : LONG or SHORT\n")
			sys.exit(1)
			
	elif args.rec and not args.update and not args.hash and not args.check and not args.cron and not args.type and not args.arch and not args.real and not args.only :
		Examples()
		sys.exit(0)
	
	elif args.arch and not args.rec and not args.update and not args.hash and not args.check and not args.cron and not args.type and not args.real and not args.only :
		archi_diff()	
	elif args.real and not args.arch and not args.rec and not args.update and not args.hash and not args.check and not args.cron and not args.type and not args.only :
		print("\x1b[6;30;42m" + "[ ok ]" + "\x1b[0m"+" Starting sic real-time detection (via daemon) : sic.service") 
		print("Please check the log file (/var/log/sic_realtime.log)")

		li = subprocess.getstatusoutput("nohup sudo /usr/share/sic/realtime.sh '/usr/share/sic/daemon.py' /var/log/auth.log > /dev/null 2>&1 &")
		if li[0] != 0 :
			print("[!] Couldn't not enable real-time detection.")
			sys.exit(1)
	else :
		sys.stderr.write("[!] Wrong combination of options.\nRead the help manual	: sic --help\nCheck recommended options	: sic --recommend\n")
		sys.exit(1)

